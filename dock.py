import abcr
from rdkit import Chem
from rdkit.Chem import AllChem
import os, random, string, shutil, time, pandas

#Generate Input Coordinate
def RandomTransform(self, seed):
    mol = Chem.AddHs(self)
    AllChem.EmbedMolecule(mol, randomSeed = seed)
    return Chem.RemoveHs(mol)

Chem.Mol.RandomTransform = RandomTransform

#Make TempDir if not Exist or Return TempDir Pathway
def genRandomString(num):
    return "".join([random.choice(string.ascii_letters + string.digits) for i in range(num)])
def genTempDir(path = "."):
    dir = genRandomString(10)
    while os.path.exists("%s/%s" % (path, dir)):
        dir = genRandomString(10)
    os.makedirs(dir)
    return "%s/%s" % (path, dir)
def globalTempDir():
    global _tempDir_
    if _tempDir_:
        return _tempDir_
    else:
        _tempDir_ = genTempDir()
        return _tempDir_

#File Waiter
def wait(file, second = 1):
    while not os.path.exists(file):
        time.sleep(second - time.time() % second)
    time.sleep(second)


#Output Group Info
def GroupInfo(group):
    return ",".join(map(str, group))
def GroupsInfo(groups):
    return "], [".join(map(GroupInfo, groups))

#Comformations Generated by bgroups and angle & Reduced by scoreFunc
def ConfReduce(self, bgroups, angle, grid, once = False, cutoff = 1, file = None, step = "", round = 0, **kwargs):
    #Different once, in Flower Step as False, while in Swing Step as True
    conf = self
    score = float("inf")
    count = 0
    gnum = 0
    for group in bgroups:
        dir = "%s/" % (file if file else globalTempDir())
        tmp = dir + "tmp.sdf"
        lig = "%s%s_%d_%d.sdf" % (dir, step, round, gnum)
        ipt = "%s%s_%d_%d.in" % (dir, step, round, gnum)
        opt = "%s_%d_%d.csv" % (step, round, gnum)
        gnum += 1

        confs = list(conf.GenerateConformation(group, angle, once, cutoff))
        tcount = 0
        for i in range(len(confs)):
            confs[i].SetProp("_Name", "%d" % tcount)
            tcount += 1
        abcr.write(confs, tmp)
        os.system("obabel -p 7 -isdf %s -osdf -O %s" % (tmp, lig))
        os.remove(tmp)

        wait(lig)
        with open(ipt, "w") as f:
            f.write("DOCKING_METHOD\trigid\nGRIDFILE\t%s\nLIGANDFILE\t%s\nPRECISION    SP\nWRITE_CSV\tTRUE\nPOSE_OUTTYPE\tligandlib_sd" % (grid, lig))
        os.system("glide -adjust -OVERWRITE -TMPLAUNCHDIR -HOST localhost:192 -max_retries 20 %s" % ipt)
        
        wait(opt)
        frame = pandas.read_csv(opt)
        try:
            value = frame[frame.docking_status == "Done"].sort_values(by = ["r_i_docking_score"]).iloc[0]
        except:
            raise
        id = int(value["title"])
        score = value["r_i_docking_score"]
        conf = confs[id]
        count += tcount
    
    return (conf, count, score, self.GetRMS(conf))

Chem.Mol.ConfReduce = ConfReduce


#====================== Main ======================
from os import path
import sys, getopt
def main(argv):
    version = "3.0.3"
    #==================== Hyperparameters ====================
    parameters = {
        "flowerAngle": 180,
        "flowerPerct": 0.6,
        "flowerOverlap": 0,
        "swingAngle": 180,
        "swingDescent": 0.7,
        "swingPerct": 0.3,
        "swingOverlap": 0,
        "stopAngle": 5,
        "stopDelta": 0.1,
        "seed": 900825,
        "cutoffDistance": 1.0,
        "flowerTemp": None,
        "swingTemp": None
    }

    #Get Parameters from Command-Line Options
    try:
        opts, _ = getopt.getopt(argv, "i:g:c:o:v", ["flowerAngle=", "flowerPerct=", "flowerOverlap=", "swingAngle=", "swingDescent=", "swingPerct=", "swingOverlap=", "stopAngle=", "stopDelta=", "seed=", "cutoffDistance=", "flowerTemp=", "swingTemp="])
    except getopt.GetoptError:
        print("Command error.")
        sys.exit(2)

    ofile = None
    for opt, arg in opts:
        if opt in ("-v"):
            print("ABCR, version %s" % version)
            return
        elif opt in ("-i"):
            ifile = arg
        elif opt in ("-c"):
            rfile = arg
        elif opt in ("-o"):
            ofile = arg
        elif opt in ("-g"):
            gfile = arg
        elif opt in ("--flowerTemp", "--swingTemp"):
            parameters[opt[2:]] = arg
        elif opt in ("--seed"):
            parameters[opt[2:]] = int(arg)
        else:
            try:
                parameters[opt[2:]] = float(arg)
            except:
                print("Option value error: %s = %s" % (opt, arg))
                sys.exit(2)
    
    global _tempDir_
    _tempDir_ = None

    #zzh: 
    parameters["swingAngle"]=parameters["flowerAngle"]
    print("*Parameters")
    try:
        for key, value in parameters.items():
            print("   "+key.ljust(15),value,sep="| ")
    except:
        raise

    #Reader
    print("*File Reader")
    try:
        print("   File: %s" % path.basename(ifile))
    except NameError:
        print("Undefined input filename.")
        sys.exit(2)

    #GridFile
    try:
        print("   GridFile: %s" % path.basename(gfile))
    except NameError:
        print("Undefined grid filename.")
        sys.exit(2)

    try:
        #Read start 3D Conformation
        start = abcr.Read(ifile)
    except:
        print("Input file format error.")
        sys.exit(2)

    try:
        #Read result 3D Conformation if Exist rfile
        reslt = abcr.Read(rfile)
    except:
        #Use start File as result Conformation and Regenerate start Conformation if NOT Exist rfile
        print("   @ Warning: Start Conformation was Generated by '%s'" % path.basename(ifile))
        reslt = start
        start = reslt.RandomTransform(parameters["seed"])
    
    print("   Rotatable Bonds: %d" % len(start.GetRotatableBonds()))
    rms = start.GetRMS(reslt)
    print("   Current RMSD: %.9f" % rms)
    tcount = 1

    #Flower
    print("*Flower Started")
    #TempDir is Necessary for Conformation Generation & Maestro Using
    #ShouldRemoveTemp = False
    #if not parameters["flowerTemp"]:
    #    parameters["flowerTemp"] = genTempDir()
    #    ShouldRemoveTemp = True
    #Split Bonds into Groups According to Hyperparameters
    groups = start.SplitRotatableBondsByPer(parameters["flowerAngle"], parameters["flowerPerct"], parameters["flowerOverlap"])
    print("   Current Group Info: [%s]" % GroupsInfo(groups))
    #Flower the Confofrmation
    try:
        flower, count, score, rms = start.ConfReduce(groups, parameters["flowerAngle"], grid = gfile, cutoff = parameters["cutoffDistance"], file = parameters["flowerTemp"], step = "flower")
    except IndexError:
        print("   No Good Pose in Docking!")
        sys.exit(255)
    tcount += count
    print("   Current Angle: %6.2f  Score: %.4f  RMSD: %.9f  Confs: %6d" % (parameters["flowerAngle"], score, rms, count))
    #if ShouldRemoveTemp:
    #    shutil.rmtree(parameters["flowerTemp"])
    print("*Flower Finished")

    #Swing
    print("*Swing Started")
    #Init Input Values
    delta = rms = float("inf")
    swingAngle = parameters["swingAngle"]
    swing = flower
    round = 0
    #Main Cicle of Swing
    while delta > parameters["stopDelta"] or swingAngle > parameters["stopAngle"]:
        #Update swingAngle
        swingAngle *= parameters["swingDescent"]
        #Split Bonds into Groups According to Hyperparameters
        groups = swing.SplitRotatableBondsByPer(swingAngle, parameters["swingPerct"], parameters["swingOverlap"])
        print("   Current Group Info: [%s]" % GroupsInfo(groups))
        #Swing the Conformation
        tswing, count, score, rmsl = swing.ConfReduce(groups, swingAngle, once = True, grid = gfile, cutoff = parameters["cutoffDistance"], file = parameters["swingTemp"], step = "swing", round = round)
        round += 1
        tcount += count
        #Update delta
        delta = swing.GetRMS(tswing)
        rmss = tswing.GetRMS(reslt)
        swing = tswing
        print("   Current Angle: %6.2f  Score: %.4f  RMSD(L): %.9f  RMSD(S): %.9f  Confs: %6d" % (swingAngle, score, rmsl, rmss, count))
    print("*Swing Finished")
    print("   Final Score: %.9f  Final RMSD(S): %.9f  Total Confs: %d" % (score, rmss, tcount))

    #Clean
    if os.path.exists(_tempDir_):
        shutil.rmtree(_tempDir_)
    
    #Writer
    print("*File Writer")
    #Write Final Structure
    try:
        ofile = ofile if ofile else ".out".join(path.splitext(ifile))
        swing.Write(ofile)
    except:
        ofile = "%s.out.mol" % path.splitext(ifile)[0]
        swing.Write(ofile)
    finally:
        print("   Output file saved: %s" % ofile)



if __name__ == "__main__":
    import time
    start = time.process_time()
    print("#========== Start ==========")
    try:
        main(sys.argv[1:])
    except:
        print("Running error.")
    finally:
        print("#=========== End ===========")
        end = time.process_time()
        print("Running Time: %.9fs" % (end - start))